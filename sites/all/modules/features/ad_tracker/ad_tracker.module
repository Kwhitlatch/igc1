<?php
/**
 * @file
 * Code for the Ad Tracker feature.
 */

include_once 'ad_tracker.features.inc';

/**
 * Implements hook_menu()
*/
function ad_tracker_menu() {
  $items['admin/config/search/ad-tracker/add'] = array(
      'title' => 'Add 302 redirect',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ad_tracker_edit_form'),
      'access arguments' => array('manage adtracker'),
      'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/search/ad-tracker/edit/%ad-tracker'] = array(
      'title' => 'Edit redirect',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ad_tracker_edit_form', 5),
      'access arguments' => array('manage adtracker'),
  );
  $items['admin/config/search/ad-tracker/delete/%ad-tracker'] = array(
      'title' => 'Delete redirect',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ad_tracker_delete_form', 5),
      'access arguments' => array('manage adtracker'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ad_tracker_permission() {
  $permissions['manage adtracker'] = array(
      'title' => t('Administer Ad Tracker'),
  );
  return $permissions;
}

/**
 * Implements hook_cron()
 */
function ad_tracker_cron() {

}

/**
 * Ad tracker listing page
 */
function ad_tracker_list_form(&$form, $form_state) {


  return $form;
}

/**
 * Form builder to add or edit an URL redirect.
 *
 * @see redirect_element_validate_source()
 * @see redirect_element_validate_redirect()
 * @see redirect_edit_form_validate()
 * @see redirect_edit_form_submit()
 *
 * @ingroup forms
 */
function ad_tracker_edit_form($form, &$form_state, $redirect = NULL) {
  if (!isset($redirect)) {
    $redirect = new stdClass();
  }

  module_load_include('inc', 'redirect', 'admin');

  // Merge default values.
  redirect_object_prepare($redirect, array(
  'source' => isset($_GET['source']) ? urldecode($_GET['source']) : '',
  'source_options' => isset($_GET['source_options']) ? drupal_get_query_array($_GET['source_options']) : array(),
  'redirect' => isset($_GET['redirect']) ? urldecode($_GET['redirect']) : '',
  'redirect_options' => isset($_GET['redirect_options']) ? drupal_get_query_array($_GET['redirect_options']) : array(),
  'language' => isset($_GET['language']) ? urldecode($_GET['language']) : LANGUAGE_NONE,
  'date_start' => isset($_GET['date_start']) ? urldecode($_GET['date_start']) : '',
  'date_end' => isset($_GET['date_end']) ? urldecode($_GET['date_end']) : '',
  ));

  $form['rid'] = array(
      '#type' => 'value',
      '#value' => $redirect->rid,
  );
  $form['type'] = array(
      '#type' => 'value',
      '#value' => $redirect->type,
  );
  $form['hash'] = array(
      '#type' => 'value',
      '#value' => $redirect->hash,
  );
  $form['uid'] = array(
      '#type' => 'value',
      '#value' => $redirect->uid,
  );
  $form['status'] = array(
      '#type' => 'value',
      '#value' => $redirect->status,
  );

  $form['source'] = array(
      '#type' => 'textfield',
      '#title' => t('Vanity URL'),
      '#description' => t("Enter an internal Drupal path or path alias to redirect (e.g. %example1 or %example2). Fragment anchors (e.g. %anchor) are <strong>not</strong> allowed.", array('%example1' => 'node/123', '%example2' => 'taxonomy/term/123', '%anchor' => '#anchor')),
      '#maxlength' => 560,
      '#default_value' => $redirect->rid || $redirect->source ? redirect_url($redirect->source, $redirect->source_options + array('alter' => FALSE)) : '',
      '#required' => TRUE,
      '#field_prefix' => $GLOBALS['base_url'] . '/' . (variable_get('clean_url', 0) ? '' : '?q='),
      '#element_validate' => array('ad_tracker_element_validate_source'),
  );
  $form['source_options'] = array(
      '#type' => 'value',
      '#value' => $redirect->source_options,
      '#tree' => TRUE,
  );
  $form['redirect'] = array(
      '#type' => 'textfield',
      '#title' => t('Redirects To'),
      '#maxlength' => 560,
      '#default_value' => $redirect->rid || $redirect->redirect ? redirect_url($redirect->redirect, $redirect->redirect_options, TRUE) : '',
      '#required' => TRUE,
      '#description' => t('Enter an internal Drupal path, path alias, or complete external URL (like http://example.com/) to redirect to. Use %front to redirect to the front page.', array('%front' => '<front>')),
      // Not validating because translated paths aren't really stored on IG
      //'#element_validate' => array('ad_tracker_element_validate_redirect'),
  );

  $form['redirect_options'] = array(
      '#type' => 'value',
      '#value' => $redirect->redirect_options,
      '#tree' => TRUE,
  );

  $form['language'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#options' => array(LANGUAGE_NONE => t('All languages')) + locale_language_list('name'),
      '#default_value' => $redirect->language,
      '#description' => t('A redirect set for a specific language will always be used when requesting this page in that language, and takes precedence over redirects set for <em>All languages</em>.'),
  );
  
  $redirect_schedule = new stdClass();
  redirect_schedule_object_prepare($redirect_schedule);
  
  if ($form['rid']['#value']) {
    $rid = $form['rid']['#value'];
    $redirect_schedule = redirect_scheduler_load($rid);
  
    if (!is_object($redirect_schedule)) {
      $redirect_schedule = new stdClass();
      redirect_schedule_object_prepare($redirect_schedule);
    }
  }
  
  $form['schedule'] = array(
      '#type' => 'fieldset',
      '#title' => t('Schedule'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
  );
  
  $form['schedule']['activate_on'] = array(
      '#type' => 'textfield',
      '#title' => t('Activate on'),
      '#date_format' => variable_get('date_format_short', 'm/d/Y H:i'),
      '#default_value' => $redirect_schedule->activate_on > 0?date('Y-m-d H:i:s', $redirect_schedule->activate_on):NULL,
  );
  
  $form['schedule']['deactivate_on'] = array(
      '#type' => 'textfield',
      '#title' => t('Deactivate on'),
      '#date_format' => variable_get('date_format_short', 'm/d/Y H:i'),
      '#default_value' => $redirect_schedule->deactivate_on > 0?date('Y-m-d H:i:s', $redirect_schedule->deactivate_on):NULL,
  );
  
  if (module_exists('date_popup')) {
    $form['schedule']['activate_on']['#type'] = 'date_popup';
    $form['schedule']['deactivate_on']['#type'] = 'date_popup';
  }
  
  $form['schedule']['one_time_access'] = array(
      '#type' => 'checkbox',
      '#title' => t('One time access'),
      '#description' => t('By checking this option, the redirection will be active only on the first time the user access the source URL.'),
      '#default_value' => isset($redirect_schedule)?$redirect_schedule->one_time_access:0,
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
  );
  $form['actions']['cancel'] = array(
      '#type' => 'link',
      '#title' => t('Cancel'),
      '#href' => isset($_GET['destination']) ? $_GET['destination'] : 'admin/config/search/ad-tracker',
  );
  
  $form['status_code'] = array(
    '#type' => 'value',
    '#value' => '302',  
  );

  return $form;
}

/**
 * Form validate handler; validate an URL redirect
 */
function ad_tracker_edit_form_validate($form, &$form_state) {
  module_load_include('inc', 'redirect', 'admin');

  $redirect = (object) $form_state['values'];

  redirect_validate($redirect, $form, $form_state);
}

/**
 * Element validate handler; validate the redirect of an URL redirect.
 *
 * @see redirect_edit_form()
 */
function ad_tracker_element_validate_redirect($element, &$form_state) {
  module_load_include('inc', 'redirect', 'redirect.admin');

  $value = &$element['#value'];
  _redirect_extract_url_options($element, $form_state);
  $value = &$form_state['values']['redirect'];


  // Normalize the path.
  $value = drupal_get_normal_path($value, $form_state['values']['language']);

  if (!valid_url($value) && !valid_url($value, TRUE) && $value != '<front>' && $value != '' && !file_exists($value)) {
    form_error($element, t('The redirect path %value is not valid.', array('%value' => $value)));
  }

  return $element;
}

/**
 * Element validate handler; validate the source of an URL redirect.
 *
 * @see redirect_edit_form()
 */
function ad_tracker_element_validate_source($element, &$form_state) {
  module_load_include('inc', 'redirect', 'redirect.admin');
  $value = &$element['#value'];

  // Check that the source contains no URL fragment.
  if (strpos($value, '#') !== FALSE) {
    form_error($element, t('The source path cannot contain an URL fragment anchor.'));
  }

  _redirect_extract_url_options($element, $form_state);

  // Disallow redirections from the frontpage.
  if ($value === '<front>') {
    form_error($element, t('The source path cannot be the front page.'));
  }

  // Cannot create redirects for valid paths.
  if (empty($form_state['values']['override'])) {
    $menu_item = menu_get_item($value);
    if ($menu_item && $menu_item['page_callback'] != 'redirect_redirect' && $value == $menu_item['path']) {
      $form_state['storage']['override_messages']['valid-path'] = t('The source path %path is likely a valid path. It is preferred to <a href="@url-alias">create URL aliases</a> for existing paths rather than redirects.', array('%path' => $value, '@url-alias' => url('admin/config/search/path/add')));
      $form_state['rebuild'] = TRUE;
    }
  }

  return $element;
}

/**
 * Form submit handler; insert or update an URL redirect.
 *
 * @see redirect_edit_form()
 */
function ad_tracker_edit_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $redirect = (object) $form_state['values'];
  $redirect->status = 1;
  redirect_save($redirect);
  $form_state['values']['rid'] = $redirect->rid;
  
  $redirects = variable_get('ad_tracker', array());
  $redirects[$redirect->rid] = $redirect;
  variable_set('ad_tracker', $redirects);
  drupal_set_message(t('The redirect has been saved.'));
  $form_state['redirect'] = 'admin/config/search/ad-tracker';
  redirect_scheduler_form_submit($form, $form_state);
}


/**
 * Implements hook_views_data().
 */
function ad_tracker_views_data() {
  // {redirect}.status_code
  $data['redirect']['status_code'] = array(
      'title' => t('Status Code'),
      'help' => t('The redirect status code.'),
      'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_numeric',
          'allow empty' => TRUE,
      ),
      'sort' => array(
          'handler' => 'views_handler_sort',
      ),
      'argument' => array(
          'handler' => 'views_handler_argument_numeric',
      ),
  );

  // {redirect}.status
  $data['redirect']['status'] = array(
      'title' => t('Status'),
      'help' => t('The status of redirect.'),
      'field' => array(
          'handler' => 'views_handler_field_boolean',
          'click sortable' => TRUE,
      ),
      'sort' => array(
          'handler' => 'views_handler_sort',
      ),
      'filter' => array(
          'handler' => 'redirect_handler_filter_boolean_operator',
      ),
      'argument' => array(
          'handler' => 'views_handler_argument_string',
      ),
  );
  $data['redirect']['table']['join']['redirect_schedule'] = array(
      'left_field' => 'rid',
      'field' => 'rid',
  );
  // Basic table information.
  $data['redirect_schedule']['table']['group'] = t('Redirect Scheduler');
  $data['redirect_schedule']['activate_on'] = array(
      'title' => t('Active-on Date'),
      'help' => t('The date/time the URL redirect is enabled.'),
      'field' => array(
          'handler' => 'views_handler_field_date',
          'click sortable' => TRUE,
      ),
      'sort' => array(
          'handler' => 'views_handler_sort',
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_date',
      ),
  );
  $data['redirect_schedule']['deactivate_on'] = array(
      'title' => t('Deactive-on Date'),
      'help' => t('The date/time the URL redirect is disabled.'),
      'field' => array(
          'handler' => 'views_handler_field_date',
          'click sortable' => TRUE,
      ),
      'sort' => array(
          'handler' => 'views_handler_sort',
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_date',
      ),
  );  

  return $data;
}

function ad_tracker_views_data_alter(&$data) {
  $data['redirect']['rid']['relationship'] = array(
      'handler' => 'views_handler_relationship',
      'base' => 'redirect_schedule',
      'base field' => 'rid',
      'label' => t('redirect schedule'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() in order to prevent validating redirect
 * paths for ad_tracker campaigns. This is needed because of how IG returns the en-us
 * path during url_inbound_alter()
 */
function ad_tracker_form_redirect_edit_form_alter(&$form, &$form_state) {
  $redirects = variable_get('ad_tracker', array());
  
  if (empty($form['rid']['#value'])) {
    return;
  }
  
  $rid = $form['rid']['#value'];
  
  if (empty($redirects[$rid])) {
    return;
  }
  
  // remove original redirect validation
  unset($form['redirect']['#element_validate']);
}