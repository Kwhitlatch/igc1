For Drupal implementation/migration, there’s 5 steps:
1.  Build Drupal Feeds: Est: 3-5 days. Write a custom module that periodically generates the xml feed and upload it via sftp.  I’ve been picking this apart for awhile, and I can’t see any way around building a custom module. Here’s the three off-the-shelf blocks I hit that make me think custom module is the way to go: 
a.  We can’t use the Drupal BazaarVoice module, because our products are generated via a custom content type and our categories are taxonomies, and our child models are field collections. Rather than drastically patch the BV module, it seems easier to grab the solr aggregated data from the IGCommerce side of things, and then run it through a foreach loop that spits out the appropriate XML for products and categories. 
b.  We can’t use views_data_export to create the xml, because it doesn’t support the level of complexity BV requires.  
c.  I was hoping to circumvent the SFTP upload by giving BV an RSS feed, but BV doesn’t support RSS, so there’s no way around the sftp upload.  I think we can nick the bulk of this code from the BV module, but we’ll need a UI so our sftp password gets saved in the database with a salt hash, rather than just hardcoding it.
2.  Convert feeds from Clickibility style to Drupal style: 4 Days. Currently Bazaarvoice is refactoring the Clickability feed for us.  When that is done, each of the 900+ products in the Clickibility feed will need to be manually assessed, to determine which product they should map to in the Drupal Feed. We implemented the feed poorly in clickablity, and there are issues with the parent-child relationship that must be fixed.  
3.  Javascript implementation: Provides content on page for the end user, but has no SEO value.  This is done, but in Drupal we use the url_field as a key field, so it won’t work as expected until step 2 above is completed.
4.  PHP implementation: Est 2-3 days.  Provides content on page for Webcrawlers.
5.  Theming: 2-3 days.  All the theming is done on the Bazaarvoice end.  We need to have steps 1-4 done before we get here, so we’re seeing products in the staging environment.  (We could technically override it on the Drupal end, but that’s the long way to do it)
